---
#========================
# File newClusterVm.yml
#
# Description: Creates a VM on the failover cluster
#
# Author: dRock Halsey
#========================

- name: PLAYBOOK | newUbuntuServer - create a new Ubuntu Server on the Hyper-V host
  hosts: "{{ variable_host }}"
  connection: local
  gather_facts: false
  tasks:

  - name: WIN_FILE | Ensure Directories are present for new VM
    delegate_to: data.dinohead.ninja
    win_file:
      path: "{{ item }}"
      state: directory
    with_items:
      - C:\ClusterStorage\cluster-storage-01\vm\{{ sdn }}
      - C:\ClusterStorage\cluster-storage-01\vm\{{ sdn }}\Virtual Hard Disks

#  # This check will be used to determine if the VM already exists. If the hard drive
#  # for the VM is found in the expected location, it will be assumed that the VM
#  # already exists. This is to prevent copying the template hard drive over an
#  # existing hard drive (the script should not be destructive to existing VMs).
#  - name: WIN_STAT | Check if the vhdx is present
#    win_stat:
#      path: C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx
#      get_md5: false
#      get_checksum: false
#    register: newUbuntuServer_vmVhdx
#
#  - name: WIN_COPY | Copy the VM template vhdx to the new directory
#    win_copy:
#      src: C:\ClusterStorage\cluster-storage-01\vhdx-templates\ubuntu-server-1604.vhdx
#      dest: C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx
#      remote_src: true
#    when: not newUbuntuServer_vmVhdx.stat.exists
#
#  - name: WIN_SHELL | Create VM in Hyper-V
#    win_shell: |-
#      if ( !( Get-VM -name testVM -erroraction 'ignore' ) ) {
#        New-VM -Name "testVM" -ComputerName data -VHDPath "C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx" -Path "C:\ClusterStorage\cluster-storage-01\vm" }
#
#  - name: WIN_SHELL | Set Number of Proccessors
#    win_shell: Set-VMProcessor testVM -Count 2
#
#  - name: WIN_SHELL | Set VM Memory
#    win_shell: Set-VM -Name testVM -DynamicMemory -MemoryMaximumBytes 4GB -MemoryStartupBytes 1GB
#
#  - name: WIN_SHELL | Disconnect NIC
#    win_shell: Disconnect-VMNetworkAdapter -VMName testVM
#
#  - name: WIN_SHELL | Start VM
#    win_shell: start-vm testVM
#
#  - name: WIN_SHELL | Wait for the VM Heartbeat
#    win_shell: |-
#      while( (Get-VM -Name testVM ).HeartBeat -ne  'OkApplicationsUnknown'){
#      		Start-Sleep -Seconds 1
#      	}
#
#  - name: Pause | Wait 15s for VM services to Start
#    pause:
#      seconds: 15
#
#  - name: WIN_SHELL | Set Networking
#    win_shell: |-
#        Function Set-VMNetworkConfiguration {
#             [CmdletBinding()]
#             Param (
#                 [Parameter(Mandatory=$true,
#                            Position=1,
#                            ParameterSetName='DHCP',
#                            ValueFromPipeline=$true)]
#                 [Parameter(Mandatory=$true,
#                            Position=0,
#                            ParameterSetName='Static',
#                            ValueFromPipeline=$true)]
#                 [Microsoft.HyperV.PowerShell.VMNetworkAdapter]$NetworkAdapter,
#
#                 [Parameter(Mandatory=$true,
#                            Position=1,
#                            ParameterSetName='Static')]
#                 [String[]]$IPAddress=@(),
#
#                 [Parameter(Mandatory=$false,
#                            Position=2,
#                            ParameterSetName='Static')]
#                 [String[]]$Subnet=@(),
#
#                 [Parameter(Mandatory=$false,
#                            Position=3,
#                            ParameterSetName='Static')]
#                 [String[]]$DefaultGateway = @(),
#
#                 [Parameter(Mandatory=$false,
#                            Position=4,
#                            ParameterSetName='Static')]
#                 [String[]]$DNSServer = @(),
#
#                 [Parameter(Mandatory=$false,
#                            Position=0,
#                            ParameterSetName='DHCP')]
#                 [Switch]$Dhcp
#             )
#
#             $VM = Get-WmiObject -Namespace 'root\virtualization\v2' -Class 'Msvm_ComputerSystem' | Where-Object { $_.ElementName -eq $NetworkAdapter.VMName }
#             $VMSettings = $vm.GetRelated('Msvm_VirtualSystemSettingData') | Where-Object { $_.VirtualSystemType -eq 'Microsoft:Hyper-V:System:Realized' }
#             $VMNetAdapters = $VMSettings.GetRelated('Msvm_SyntheticEthernetPortSettingData')
#
#             $NetworkSettings = @()
#             foreach ($NetAdapter in $VMNetAdapters) {
#                 if ($NetAdapter.Address -eq $NetworkAdapter.MacAddress) {
#                     $NetworkSettings = $NetworkSettings + $NetAdapter.GetRelated("Msvm_GuestNetworkAdapterConfiguration")
#                 }
#             }
#
#             $NetworkSettings[0].IPAddresses = $IPAddress
#             $NetworkSettings[0].Subnets = $Subnet
#             $NetworkSettings[0].DefaultGateways = $DefaultGateway
#             $NetworkSettings[0].DNSServers = $DNSServer
#             $NetworkSettings[0].ProtocolIFType = 4096
#
#             if ($dhcp) {
#                 $NetworkSettings[0].DHCPEnabled = $true
#             } else {
#                 $NetworkSettings[0].DHCPEnabled = $false
#             }
#
#             $Service = Get-WmiObject -Class "Msvm_VirtualSystemManagementService" -Namespace "root\virtualization\v2"
#             $setIP = $Service.SetGuestNetworkAdapterConfiguration($VM, $NetworkSettings[0].GetText(1))
#
#             if ($setip.ReturnValue -eq 4096) {
#                 $job=[WMI]$setip.job
#
#                 while ($job.JobState -eq 3 -or $job.JobState -eq 4) {
#                     start-sleep 1
#                     $job=[WMI]$setip.job
#                 }
#
#                 if ($job.JobState -eq 7) {
#                     write-host "Success"
#                 }
#                 else {
#                     $job.GetError()
#                 }
#             } elseif($setip.ReturnValue -eq 0) {
#                 Write-Host "Success"
#             }
#         } Get-VMNetworkAdapter -VMName testVM | Set-VMNetworkConfiguration -IPAddress 10.0.1.29 -Subnet 255.255.255.0 -DNSServer 10.0.1.2,10.0.1.22,10.0.1.222 -DefaultGateway 10.0.1.1
#
#  - name: WIN_SHELL | Restart VM
#    win_shell: restart-vm testVM -force
#
#  - name: WIN_SHELL | Connect NIC
#    win_shell: Connect-VMNetworkAdapter -VMName testVM -SwitchName SW-1G
#
#- hosts: testVM.DINOHEAD.NINJA
#  connection: local
#  gather_facts: false
#  tasks:
#  - name: WAIT_FOR | Wait for response from testVM on port 22
#    local_action: wait_for
#    args:
#      port: 22
#      host: 10.0.1.29
#      delay: 30
#      timeout: 400
#
#
#- hosts: dc[0]
#  tasks:
#
#  - name: WIN_SHELL | Register DNS entry with Domain Controller
#    win_shell: |-
#      if (!(Get-DnsServerResourceRecord -Name "testVM" -ZoneName "dinohead.ninja" -erroraction 'ignore')) {
#        Add-DnsServerResourceRecordA -Name "testVM" -ZoneName "dinohead.ninja" -AllowUpdateAny -IPv4Address "10.0.1.29" }
#      else {
#        Remove-DnsServerResourceRecord -ZoneName "dinohead.ninja" -RRType "A" -Name "testVM" -Force;
#        Add-DnsServerResourceRecordA -Name "testVM" -ZoneName "dinohead.ninja" -AllowUpdateAny -IPv4Address "10.0.1.29" }
#
#- hosts: hyper-v-cluster[0]
#  tasks:
#
#  - name: WIN_SHELL | Add VM to Cluster
#    win_shell: |-
#      if ( !( Get-ClusterResource -Cluster kirk -Name "Virtual Machine testVM" -erroraction 'ignore' ) ) {
#        Add-ClusterVirtualMachineRole -VMName testVM -Cluster kirk }

