---
#========================
# File newUbuntuServer.yml
#
# Description: Creates a VM on a Hyper-V host
#
# Author: dRock Halsey

- name: PLAYBOOK | newUbuntuServer - create a new Ubuntu Server on the Hyper-V host
  hosts: data.DINOHEAD.NINJA
  tasks:

  - name: WIN_FILE | Ensure Directories are present for new VM
    win_file:
      path: "{{ item }}"
      state: directory
    with_items:
      - C:\ClusterStorage\cluster-storage-01\vm\testVM
      - C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks

  # This check will be used to determine if the VM already exists. If the hard drive
  # for the VM is found in the expected location, it will be assumed that the VM
  # already exists. This is to prevent copying the template hard drive over an
  # existing hard drive (the script should not be destructive to existing VMs).
  - name: WIN_STAT | Check if the vhdx is present
    win_stat:
      path: C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx
      get_checksum: false
    register: newUbuntuServer_vmVhdx


  - name: WIN_COPY | Copy the VM template vhdx to the new directory
    win_copy:
      src: C:\ClusterStorage\cluster-storage-01\vhdx-templates\ubuntu-server-1604.vhdx
      dest: C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx
      remote_src: true
    when: not newUbuntuServer_vmVhdx.exists

  - name: WIN_COMMAND | Create VM in Hyper-V
    win_shell: if (!(Get-VM -name testVM -erroraction 'ignore')) { New-VM -Name "testVM" -ComputerName data -VHDPath "C:\ClusterStorage\cluster-storage-01\vm\testVM\Virtual Hard Disks\disk-0.vhdx" -Path "C:\ClusterStorage\cluster-storage-01\vm"}

  - name: WIN_COMMAND | Set Number of Proccessors
    win_shell: Set-VMProcessor testVM -Count 2

  - name: WIN_COMMAND | Set VM Memory
    win_shell: Set-VM -Name testVM -DynamicMemory -MemoryMaximumBytes 4GB -MemoryStartupBytes 1GB

  - name: WIN_COMMAND | Disconnect NIC
    win_shell: Disconnect-VMNetworkAdapter -VMName testVM

  - name: WIN_COMMAND | Start VM
    win_shell: start-vm testVM

  - name: SCRIPT | Run networking script to configure networking
    script: scripts/setHypervVmNetworking.ps1

  - name: WIN_COMMAND | Restart VM
    win_shell: restart-vm testVM -force